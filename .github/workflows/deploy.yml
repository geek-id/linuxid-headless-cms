name: Deploy LinuxID Pure Static Site Generator

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint --if-present
        
      - name: Run type checking
        run: npm run type-check --if-present
        
      - name: Run tests
        run: npm run test --if-present
        
      - name: Verify content structure
        run: |
          echo "üìÅ Verifying content structure..."
          ls -la content/
          echo "üìù Posts:"
          ls -la content/posts/ || echo "No posts directory"
          echo "‚≠ê Reviews:"
          ls -la content/reviews/ || echo "No reviews directory"
          echo "üìÑ Pages:"
          ls -la content/pages/ || echo "No pages directory"
          echo "üñºÔ∏è Static images:"
          ls -la public/static/img/ || echo "No static images directory"
        
      - name: Build static site
        run: npm run build
        env:
          # === SITE CONFIGURATION ===
          # Basic site information
          NEXT_PUBLIC_SITE_NAME: ${{ secrets.NEXT_PUBLIC_SITE_NAME || 'LinuxID' }}
          NEXT_PUBLIC_SITE_DESCRIPTION: ${{ secrets.NEXT_PUBLIC_SITE_DESCRIPTION || 'Modern, SEO-optimized static site built with Next.js' }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://linux-id.net' }}
          
          # SEO Configuration
          NEXT_PUBLIC_SITE_KEYWORDS: ${{ secrets.NEXT_PUBLIC_SITE_KEYWORDS || 'nextjs,static-site,typescript,tailwind,markdown,blog,reviews' }}
          NEXT_PUBLIC_SITE_AUTHOR: ${{ secrets.NEXT_PUBLIC_SITE_AUTHOR || 'LinuxID Team' }}
          NEXT_PUBLIC_SITE_EMAIL: ${{ secrets.NEXT_PUBLIC_SITE_EMAIL || 'hello@linux-id.net' }}
          
          # Social Media (Optional)
          NEXT_PUBLIC_TWITTER_HANDLE: ${{ secrets.NEXT_PUBLIC_TWITTER_HANDLE }}
          NEXT_PUBLIC_GITHUB_URL: ${{ secrets.NEXT_PUBLIC_GITHUB_URL }}
          
          # Open Graph / Social Sharing
          NEXT_PUBLIC_OG_IMAGE: ${{ secrets.NEXT_PUBLIC_OG_IMAGE || '/static/img/og-image.jpg' }}
          NEXT_PUBLIC_OG_TYPE: ${{ secrets.NEXT_PUBLIC_OG_TYPE || 'website' }}
          NEXT_PUBLIC_OG_LOCALE: ${{ secrets.NEXT_PUBLIC_OG_LOCALE || 'en_US' }}
          
          # Analytics (Optional)
          NEXT_PUBLIC_GA_TRACKING_ID: ${{ secrets.NEXT_PUBLIC_GA_TRACKING_ID }}
          NEXT_PUBLIC_PLAUSIBLE_DOMAIN: ${{ secrets.NEXT_PUBLIC_PLAUSIBLE_DOMAIN }}
          NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION: ${{ secrets.NEXT_PUBLIC_GOOGLE_SITE_VERIFICATION }}
          
          # === DEVELOPMENT SETTINGS ===
          # Content directory (build-time only)
          CONTENT_DIR: ./content
          
          # Build settings
          NODE_ENV: production
        
      - name: Verify build output
        run: |
          echo "‚úÖ Static site build completed successfully"
          echo ""
          echo "üìÅ Build output directory:"
          ls -la out/
          echo ""
          echo "üìÑ Generated pages:"
          find out/ -name "*.html" | head -10
          echo ""
          echo "üìä Build size analysis:"
          du -sh out/
          echo ""
          echo "üîç Search functionality included:"
          ls -la out/_next/static/chunks/ | grep -E "\.(js|css)$" | head -5 || true
          echo ""
          echo "üñºÔ∏è Static assets:"
          ls -la out/static/img/ || echo "No static images found"
          
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME || 'linuxid-static-site' }}
          directory: out
          
      - name: Post-deployment verification
        run: |
          echo "üöÄ Pure static site deployment completed!"
          echo ""
          echo "üåê Website URLs:"
          echo "   üè† Homepage: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}"
          echo "   üìù Blog: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}/posts"
          echo "   ‚≠ê Reviews: ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}/reviews"
          echo ""
          echo "‚ú® Features deployed:"
          echo "   üîç Client-side search across all pages"
          echo "   üì± Responsive design with modern UI"
          echo "   üéØ SEO-optimized with meta tags"
          echo "   ‚ö° Zero server requirements"
          echo "   üåê Global CDN distribution"
          echo ""
          echo "üìä Performance benefits:"
          echo "   üí∞ Zero hosting costs (static)"
          echo "   üöÄ Instant loading from CDN"
          echo "   üîí Maximum security (no server)"
          echo "   üìà Unlimited scaling"

  # Lighthouse performance audit for pure static site
  lighthouse-audit:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI for Static Site
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}
            ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}/posts
            ${{ secrets.NEXT_PUBLIC_SITE_URL || 'https://your-domain.com' }}/reviews
          configPath: './.lighthouserc.json'
          temporaryPublicStorage: true
        continue-on-error: true
        
      - name: Performance Summary
        run: |
          echo "üìä Lighthouse audit completed for pure static site"
          echo "üéØ Expected scores: 100/100 for Performance, Accessibility, Best Practices, SEO"
          echo "‚ö° Static sites typically achieve perfect Lighthouse scores" 